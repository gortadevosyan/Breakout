module Scenes.Transition2.Common exposing (Model, nullModel, initModel)

{-| Common module

This module is generated by Messenger, don't modify this.

@docs Model, nullModel, initModel

-}

import Lib.Env.Env exposing (Env, addCommonData)
import Lib.Scene.Base exposing (LayerPacker, SceneInitData(..))
import Scenes.Transition2.Background.Export as Background
import Scenes.Transition2.Background.Global as BackgroundG
import Scenes.Transition2.LayerBase exposing (CommonData, nullCommonData)
import Scenes.Transition2.LayerSettings exposing (LayerT)
import Scenes.Transition2.Room.Export as Room
import Scenes.Transition2.Room.Global as RoomG
import Scenes.Transition2.SceneInit exposing (initCommonData, nullTransition2Init)


{-| Model
-}
type alias Model =
    LayerPacker CommonData LayerT


{-| nullModel
-}
nullModel : Model
nullModel =
    { commonData = nullCommonData
    , layers = []
    }


{-| Initialize the model
-}
initModel : Env -> SceneInitData -> Model
initModel env init =
    let
        layerInitData =
            case init of
                Transition2InitData x ->
                    x

                _ ->
                    nullTransition2Init
    in
    { commonData = initCommonData env layerInitData
    , layers =
        [ BackgroundG.getLayerT <| Background.initLayer (addCommonData nullCommonData env) layerInitData
        , RoomG.getLayerT <| Room.initLayer (addCommonData nullCommonData env) layerInitData
        ]
    }
