module Scenes.Level2.GameStuff.Global exposing (getLayerT)

{-| Global module

This module is generated by Messenger, don't modify this.

@docs getLayerT

-}

import Canvas exposing (Renderable)
import Lib.Layer.Base exposing (Layer, LayerMsg, LayerTarget)
import Messenger.GeneralModel exposing (GeneralModel)
import Scenes.Level2.GameStuff.Common exposing (EnvC, nullModel)
import Scenes.Level2.GameStuff.Export exposing (Data)
import Scenes.Level2.LayerBase exposing (CommonData)
import Scenes.Level2.LayerSettings exposing (LayerDataType(..), LayerT)


dataToLDT : Data -> LayerDataType
dataToLDT data =
    GameStuffData data


ldtToData : EnvC -> LayerDataType -> Data
ldtToData env ldt =
    case ldt of
        GameStuffData x ->
            x

        _ ->
            nullModel env


{-| getLayerT
-}
getLayerT : Layer Data CommonData -> LayerT
getLayerT layer =
    let
        update : EnvC -> LayerMsg -> LayerDataType -> ( LayerDataType, List ( LayerTarget, LayerMsg ), EnvC )
        update env lm ldt =
            let
                ( rldt, newmsg, newenv ) =
                    layer.update env lm (ldtToData env ldt)
            in
            ( dataToLDT rldt, newmsg, newenv )

        view : EnvC -> LayerDataType -> Renderable
        view env ldt =
            layer.view env (ldtToData env ldt)
    in
    GeneralModel layer.name (dataToLDT layer.data) update view
